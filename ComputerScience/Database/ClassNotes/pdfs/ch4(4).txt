Database System Concepts, 7th Ed. ©Silberschatz, Korth and Sudarshan
See www.db-book.com for conditions on re-use
©Silberschatz, Korth and Sudarshan 4.2 Database System Concepts - 7th Edition
n Join Expressions
n Transactions
n Views
n Index
n Integrity Constraints
n More on SQL Data Types
n Authorization
©Silberschatz, Korth and Sudarshan 4.3 Database System Concepts - 7th Edition
n Join operations take two relations and return as a result
another relation. n These additional operations are typically used as subquery
expressions in the from clause
n Join type – defines how tuples in each relation that do not
match any tuple in the other relation (based on the join
condition) are treated. n Join condition – defines which tuples in the two relations match, and
what attributes are present in the result of the join. n Natural join eliminates duplicate attributes
©Silberschatz, Korth and Sudarshan 4.4 Database System Concepts - 7th Edition
n Relation course
n Relation prereq
n Observe that
prereq information is missing for CS-315 and
course information is missing for CS-347
©Silberschatz, Korth and Sudarshan 4.5 Database System Concepts - 7th Edition
n course natural right outer join prereq
n course natural full outer join prereq
©Silberschatz, Korth and Sudarshan 4.6 Database System Concepts - 7th Edition
n course full outer join prereq using (course_id)
n Example that avoids dangerous natural join:
select name, title
from (student natural join takes) join course using (course_id)
©Silberschatz, Korth and Sudarshan 4.7 Database System Concepts - 7th Edition
n course inner join prereq on
course.course_id = prereq.course_id
n course left outer join prereq on
course.course_id = prereq.course_id
©Silberschatz, Korth and Sudarshan 4.8 Database System Concepts - 7th Edition
Transactions
n Unit of work consists of sequence of query and/or update statements
n Atomic transaction
l either fully executed or rolled back as if it never occurred
n Isolation from concurrent transactions
n Transactions begin implicitly
l Ended by
4 commit work: The updates performed by the transaction
become permanent in the database. 4 or rollback work: All the updates performed by the SQL
statements in the transaction are undone. n But default on most databases: each SQL statement commits
automatically
l Can turn off auto commit for a session (e.g. using API)
l In SQL:1999, can use: begin atomic …. end
4 Not supported on most databases
©Silberschatz, Korth and Sudarshan 4.9 Database System Concepts - 7th Edition
n In some cases, it is not desirable for all users to see the entire
logical model (that is, all the actual relations stored in the
database.)
n Consider a person who needs to know an instructors name
and department, but not the salary. This person should see a
relation described, in SQL, by
select ID, name, dept_name
from instructor
n A view provides a mechanism to hide certain data from the
view of certain users. n Any relation that is not of the conceptual model but is made
visible to a user as a “virtual relation” is called a view.
©Silberschatz, Korth and Sudarshan 4.10 Database System Concepts - 7th Edition
n A view is defined using the create view statement which has
the form
create view v as < query expression >
where <query expression> is any legal SQL expression. The
view name is represented by v. n Once a view is defined, the view name can be used to refer to
the virtual relation that the view generates. n View definition is not the same as creating a new relation by
evaluating the query expression
l Rather, a view definition causes the saving of an expression;
the expression is substituted into queries using the view.
©Silberschatz, Korth and Sudarshan 4.11 Database System Concepts - 7th Edition
n A view of instructors without their salary
create view faculty as
select ID, name, dept_name
from instructor
n Find all instructors in the Biology department
select name
from faculty
where dept_name = ‘Biology’
n Create a view of department salary totals
create view departments_total_salary(dept_name, total_salary) as
select dept_name, sum (salary)
from instructor
group by dept_name;
n select dept_name from departments_total_salary where total_salary
> (select avg(tota_salary) from departments_total_salary)
©Silberschatz, Korth and Sudarshan 4.12 Database System Concepts - 7th Edition
n create view physics_fall_2009 as
select course.course_id, sec_id, building, room_number
from course, section
where course.course_id = section.course_id
and course.dept_name = ’Physics’
and section.semester = ’Fall’
and section.year = ’2009’;
n create view physics_fall_2009_watson as
select course_id, room_number
from physics_fall_2009
where building= ’Watson’;
©Silberschatz, Korth and Sudarshan 4.13 Database System Concepts - 7th Edition
n Expand use of a view in a query/another view
create view physics_fall_2009_watson as
(select course_id, room_number
from (select course.course_id, building, room_number
from course, section
where course.course_id = section.course_id
and course.dept_name = ’Physics’
and section.semester = ’Fall’
and section.year = ’2009’)
where building= ’Watson’;
©Silberschatz, Korth and Sudarshan 4.14 Database System Concepts - 7th Edition
n One view may be used in the expression defining another view
n A view relation v1
is said to depend directly on a view relation
v2
if v2
is used in the expression defining v1
n A view relation v1
is said to depend on view relation v2
if either
v1 depends directly to v2 or there is a path of dependencies
from v1
to v2
n A view relation v is said to be recursive if it depends on itself.
©Silberschatz, Korth and Sudarshan 4.15 Database System Concepts - 7th Edition
n A way to define the meaning of views defined in terms of other
views. n Let view v1 be defined by an expression e1
that may itself
contain uses of view relations. n View expansion of an expression repeats the following
replacement step:
repeat
Find any view relation vi in e1
Replace the view relation vi by the expression defining vi
until no more view relations are present in e1
n As long as the view definitions are not recursive, this loop will
terminate
©Silberschatz, Korth and Sudarshan 4.16 Database System Concepts - 7th Edition
n Add a new tuple to faculty view which we defined earlier
insert into faculty values (’30765’
,
’Green’
,
’Music’);
This insertion must be represented by the insertion of the tuple
(’30765’
,
’Green’
,
’Music’
, null)
into the instructor relation
©Silberschatz, Korth and Sudarshan 4.17 Database System Concepts - 7th Edition
n create view instructor_info as
select ID, name, building
from instructor, department
where instructor.dept_name= department.dept_name;
n insert into instructor_info values (’69987’
,
’White’
,
’Taylor’);
4 which department, if multiple departments in Taylor?
4 what if no department is in Taylor?
n Most SQL implementations allow updates only on simple views
l The from clause has only one database relation. l The select clause contains only attribute names of the
relation, and does not have any expressions, aggregates, or
distinct specification. l Any attribute not listed in the select clause can be set to null
l The query does not have a group by or having clause.
©Silberschatz, Korth and Sudarshan 4.18 Database System Concepts - 7th Edition
n create view history_instructors as
select *
from instructor
where dept_name= ’History’;
n What happens if we insert (’25566’
,
’Brown’
,
’Biology’
, 100000) into
history_instructors?
n To avoid instructors in ‘Biology’ department being inserted into a history_instructors
view, we can use with check option while creating view.
©Silberschatz, Korth and Sudarshan 4.19 Database System Concepts - 7th Edition
Materialized Views
n Materializing a view: create a physical table containing all the tuples in the
result of the query defining the view
n If relations used in the query are updated, the materialized view result becomes
out of date
l Need to maintain the view, by updating the view whenever the underlying
relations are updated.
©Silberschatz, Korth and Sudarshan 4.20 Database System Concepts - 7th Edition
n create table student
(ID varchar (5),
name varchar (20) not null,
dept_name varchar (20),
tot_cred numeric (3,0) default 0,
primary key (ID))
n create index studentName_index on student(Name)
n Indices are data structures used to speed up access to records with specified values
for index attributes
l e.g. select *
from student
where Name = ‘Mike’
can be executed by using the index to find the required record, without looking at all
records of student
©Silberschatz, Korth and Sudarshan 4.21 Database System Concepts - 7th Edition
n Integrity constraints guard against accidental damage to the
database, by ensuring that authorized changes to the
database do not result in a loss of data consistency. l A checking account must have a balance greater than
$10,000.00
l A salary of a bank employee must be at least $4.00 an
hour
l A customer must have a (non-null) phone number
©Silberschatz, Korth and Sudarshan 4.22 Database System Concepts - 7th Edition
n not null
n primary key
n unique
n check (P), where P is a predicate
©Silberschatz, Korth and Sudarshan 4.23 Database System Concepts - 7th Edition
n not null
l Declare name and budget to be not null
name varchar(20) not null
budget numeric(12,2) not null
n unique ( A1
, A2
, …, Am)
l The unique specification states that the attributes A1, A2, …
Am form a candidate key. l Candidate keys are permitted to be null (in contrast to primary
keys).
©Silberschatz, Korth and Sudarshan 4.24 Database System Concepts - 7th Edition
n check (P)
where P is a predicate. Specifies a predicate P that must be
satisfied by every tuple in a relation. Example: ensure that semester is one of fall, winter, spring
or summer:
create table section (
course_id varchar (8),
sec_id varchar (8),
semester varchar (6),
year numeric (4,0),
building varchar (15),
room_number varchar (7),
time slot id varchar (4),
primary key (course_id, sec_id, semester, year),
check (semester in (’Fall’
,
’Winter’
,
’Spring’
,
’Summer’))
);
©Silberschatz, Korth and Sudarshan 4.25 Database System Concepts - 7th Edition
n Ensures that a value that appears in one relation for a given
set of attributes also appears for a certain set of attributes in
another relation. l Example: If “Biology” is a department name appearing in
one of the tuples in the instructor relation, then there exists
a tuple in the department relation for “Biology”. n Let A be a set of attributes. Let R and S be two relations that
contain attributes A and where A is the primary key of S. A is
said to be a foreign key of R if for any values of A appearing
in R these values also appear in S. n Foreign keys can be null
©Silberschatz, Korth and Sudarshan 4.26 Database System Concepts - 7th Edition
n create table course (
course_id char(5) primary key,
title varchar(20),
dept_name varchar(20) references department
)
n create table course ( …
dept_name varchar(20),
foreign key (dept_name) references department
on delete cascade
on update cascade,
. . . )
n alternative actions to cascade: set null, set default
©Silberschatz, Korth and Sudarshan 4.27 Database System Concepts - 7th Edition
n E.g. create table person (
ID char(10),
name char(40),
mother char(10),
father char(10),
primary key ID,
foreign key father references person,
foreign key mother references person)
n How to insert a tuple without causing constraint violation ?
l insert father and mother of a person before inserting person
l OR, set father and mother to null initially, update after
inserting all persons (not possible if father and mother
attributes declared to be not null)
©Silberschatz, Korth and Sudarshan 4.28 Database System Concepts - 7th Edition
n hope can we define the constraint as: check (time_slot_id in (select time_slot_id
from time_slot)), because time_slot_id is not a foreign key in section (why?)
n Unfortunately: subquery in check clause not supported by pretty much any database
l Alternative: triggers (later)
n Another way: create assertion <assertion-name> check <predicate>;
l For each tuple in the student relation, the value of the attribute tot_cred must equal the sum of
credits of courses that the student has completed successfully. l An instructor cannot teach in two different classrooms in a semester in the same time slot
l Also not supported by anyone
©Silberschatz, Korth and Sudarshan 4.29 Database System Concepts - 7th Edition
n date: Dates, containing a (4 digit) year, month and date
l Example: date ‘2005-7-27’
n time: Time of day, in hours, minutes and seconds. l Example: time ‘09:00:30’ time ‘09:00:30.75’
n timestamp: date plus time of day
l Example: timestamp ‘2005-7-27 09:00:30.75’
n interval: period of time
l Example: interval ‘4 days 3 hours 2 minutes 1 second’
l Subtracting a date/time/timestamp value from another gives
an interval value
l Interval values can be added to date/time/timestamp values
©Silberschatz, Korth and Sudarshan 4.30 Database System Concepts - 7th Edition
n create type construct in SQL creates user-defined type
create type Dollars as numeric (12,2) final
l create table department
(dept_name varchar (20),
building varchar (15),
budget Dollars);
©Silberschatz, Korth and Sudarshan 4.31 Database System Concepts - 7th Edition
n create domain construct in SQL-92 creates user-defined domain types
create domain person_name char(20) not null
n Types and domains are similar. Domains can have constraints, such as not null,
specified on them. n create domain degree_level varchar(10)
constraint degree_level_constraint
check (value in (’Bachelors’
,
’Masters’
,
’Doctorate’));
©Silberschatz, Korth and Sudarshan 4.32 Database System Concepts - 7th Edition
n Large objects (photos, videos, CAD files, etc.) are stored as a large
object:
l blob: binary large object -- object is a large collection of uninterpreted
binary data (whose interpretation is left to an application outside of
the database system)
l clob: character large object -- object is a large collection of character
data
l When a query returns a large object, a pointer is returned rather than
the large object itself.
©Silberschatz, Korth and Sudarshan 4.33 Database System Concepts - 7th Edition
Forms of authorization on parts of the database:
n Read - allows reading, but not modification of data. n Insert - allows insertion of new data, but not modification of existing
data. n Update - allows modification, but not deletion of data. n Delete - allows deletion of data. Forms of authorization to modify the database schema
n Index - allows creation and deletion of indices. n Resources - allows creation of new relations. n Alteration - allows addition or deletion of attributes in a relation. n Drop - allows deletion of relations.
©Silberschatz, Korth and Sudarshan 4.34 Database System Concepts - 7th Edition
n The grant statement is used to confer authorization
grant <privilege list>
on <relation name or view name> to <user list>
n <user list> is:
l a user-id
l public, which allows all valid users the privilege granted
l A role (more on this later)
n Granting a privilege on a view does not imply granting any
privileges on the underlying relations. n The grantor of the privilege must already hold the privilege on
the specified item (or be the database administrator).
©Silberschatz, Korth and Sudarshan 4.35 Database System Concepts - 7th Edition
n select: allows read access to relation,or the ability to query
using the view
l Example: grant users U1
, U2
, and U3 select
authorization on the instructor relation:
grant select on instructor to U1
, U2
, U3
n insert: the ability to insert tuples
n update: the ability to update a tuple or some attributes
using the SQL update statement
n delete: the ability to delete tuples. n all privileges: used as a short form for all the allowable
privileges
©Silberschatz, Korth and Sudarshan 4.36 Database System Concepts - 7th Edition
n The revoke statement is used to revoke authorization. revoke <privilege list>
on <relation name or view name> from <user list>
n Example:
revoke select on branch from U1
, U2
, U3
n <privilege-list> may be all to revoke all privileges the revokee
may hold. n If <revokee-list> includes public, all users lose the privilege
except those granted it explicitly. n If the same privilege was granted twice to the same user by
different granters, the user may retain the privilege after the
revocation. n All privileges that depend on the privilege being revoked are
also revoked.
©Silberschatz, Korth and Sudarshan 4.37 Database System Concepts - 7th Edition
Roles
n A role is a way to distinguish among various users as far as what these
users can access/update in the database. n To create a role we use:
create a role <name>
n Example:
l create role instructor
n Once a role is created we can assign “users” to the role using:
l grant <role> to <users>
©Silberschatz, Korth and Sudarshan 4.38 Database System Concepts - 7th Edition
Roles
n create role instructor;
n grant instructor to Amit; //grant the privileges(currently or future) of instructor to Amit
n Privileges can be granted to roles:
l grant select on takes to instructor;
n Roles can be granted to users, as well as to other roles
l create role teaching_assistant
l grant teaching_assistant to instructor;
4 Instructor inherits all privileges of teaching_assistant
n Chain of roles
l create role dean;
l grant instructor to dean;
l grant dean to Satoshi;
©Silberschatz, Korth and Sudarshan 4.39 Database System Concepts - 7th Edition
n create view geo_instructor as
(select *
from instructor
where dept_name = ’Geology’);
n grant select on geo_instructor to geo_staff
n Suppose that a geo_staff member issues
l select *
from geo_instructor;
n What if
l geo_staff does not have permissions on instructor?
l creator of view did not have some permissions on instructor?
©Silberschatz, Korth and Sudarshan 4.40 Database System Concepts - 7th Edition
n references privilege to create foreign key
l grant reference (dept_name) on department to Mariano;
l why is this required?
n transfer of privileges
l grant select on department to Amit with grant option;
l revoke select on department from Amit, Satoshi cascade;
l revoke select on department from Amit, Satoshi restrict;
n Etc. read Section 4.7 for more details we have omitted here.
Database System Concepts, 7th Ed. ©Silberschatz, Korth and Sudarshan
See www.db-book.com for conditions on re-use
©Silberschatz, Korth and Sudarshan 4.42 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 4.43 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 4.44 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 4.45 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 4.46 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 4.47 Database System Concepts - 7th Edition
Taylor
©Silberschatz, Korth and Sudarshan 4.48 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 4.49 Database System Concepts - 7th Edition
