Database System Concepts, 7th Ed. ©Silberschatz, Korth and Sudarshan
See www.db-book.com for conditions on re-use
©Silberschatz, Korth and Sudarshan 7.2 Database System Concepts - 7th Edition
n Modeling Components
n E-R Diagram
n Weak Entity Sets
n E-R Diagram of the University Database
n Reduction to Relation Schemas
n Extended E-R Features
n Design Issues
©Silberschatz, Korth and Sudarshan 7.3 Database System Concepts - 7th Edition
Database Design Approaches
§ Entity Relationship Model (covered in this chapter)
• Models an enterprise as a collection of entities and relationships
§ Entity: a “thing” or “object” in the enterprise that is distinguishable
from other objects
• Described by a set of attributes
§ Relationship: an association among several entities
• Represented diagrammatically by an entity-relationship diagram:
§ Normalization Theory (Chapter 7)
• Formalize what designs are bad, and test for them
©Silberschatz, Korth and Sudarshan 7.4 Database System Concepts - 7th Edition
Five Basic Components:
Entity Sets
Attributes (for entity and relationship)
Relationship Sets
Keys
Mapping Cardinalities
©Silberschatz, Korth and Sudarshan 7.5 Database System Concepts - 7th Edition
n Model a database from design perspective, not programming perspective
n A database can be modeled as:
l a collection of entities, l relationship among entities. n An entity is an object that exists and is distinguishable from other objects. l Example: specific person, company, event, plant
n Entities have attributes
l Example: people have names and addresses
n An entity set is a set of entities of the same type that share the same
properties. l Example: set of all persons, companies, trees, holidays
©Silberschatz, Korth and Sudarshan 7.6 Database System Concepts - 7th Edition
instructor_ID instructor_name student-ID student_name
©Silberschatz, Korth and Sudarshan 7.7 Database System Concepts - 7th Edition
n An entity is represented by a set of attributes, that is descriptive
properties possessed by all members of an entity set. l Example:
instructor = (ID, name, street, city, salary )
course= (course_id, title, credits)
n Domain – the set of permitted values for each attribute
n Attribute types:
l Simple and composite attributes. l Single-valued and multivalued attributes
4 Example: multivalued attribute: phone_numbers
l Derived attributes
4 Can be computed from other attributes
4 Example: age, given date_of_birth
©Silberschatz, Korth and Sudarshan 7.8 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.9 Database System Concepts - 7th Edition
n A relationship is an association among several entities
Example:
44553 (Peltier) advisor 22222 (Einstein)
student entity relationship set instructor entity
n A relationship set is a mathematical relation among n  2 entities, each
taken from entity sets
{(e1
, e2
, … en
) | e1  E1
, e2  E2
, …, en  En
}
where (e1
, e2
, …, en
) is a relationship
l Example:
(44553,22222)  advisor
©Silberschatz, Korth and Sudarshan 7.10 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.11 Database System Concepts - 7th Edition
n binary relationship
l involve two entity sets (or degree two). l most relationship sets in a database system are binary. n Relationships between more than two entity sets are rare. Most
relationships are binary. (More on this later.)
4 Example: students work on research projects under the
guidance of an instructor. 4 relationship proj_guide is a ternary relationship between
instructor, student, and project
©Silberschatz, Korth and Sudarshan 7.12 Database System Concepts - 7th Edition
n Most relationship does not have extra attributes;
n But some relationship sets can have extra attributes. n For instance, the advisor relationship set between entity sets
instructor and student may have the attribute date which tracks when
the student started being associated with the advisor
©Silberschatz, Korth and Sudarshan 7.13 Database System Concepts - 7th Edition
n A super key of an entity set is a set of one or more attributes
whose values uniquely determine each entity. n A candidate key of an entity set is a minimal super key
l ID is candidate key of instructor
l course_id is candidate key of course
n Although several candidate keys may exist, one of the candidate
keys is selected to be the primary key.
©Silberschatz, Korth and Sudarshan 7.14 Database System Concepts - 7th Edition
n The combination of primary keys of the participating entity sets
forms a super key of a relationship set. l (s_id, i_id) is the super key of advisor
©Silberschatz, Korth and Sudarshan 7.15 Database System Concepts - 7th Edition
n Suppose we have entity sets
l instructor, with attributes including dept_name, which means that the instructor belongs to a
specific department. (This is in fact kind of relationship)
l department
and a relationship
l inst_dept relating instructor and department
n Attribute dept_name in entity instructor is redundant since there is an explicit relationship
inst_dept which relates instructors to departments
l The attribute replicates information present in the relationship, and should be removed from
instructor
l BUT: when converting back to tables, in some cases the attribute gets reintroduced, as we
will see. n How if the redundant attribute be part of the primary key in the entity set
©Silberschatz, Korth and Sudarshan 7.16 Database System Concepts - 7th Edition
n Express the number of entities to which another entity can be
associated via a relationship set. n Most useful in describing binary relationship sets. n For a binary relationship set the mapping cardinality must be one of
the following types:
l One to one
l One to many
l Many to one
l Many to many
©Silberschatz, Korth and Sudarshan 7.17 Database System Concepts - 7th Edition
One to one One to many
Note: Some elements in A and B may not be mapped to any
elements in the other set
©Silberschatz, Korth and Sudarshan 7.18 Database System Concepts - 7th Edition
Many to one Many to many
Note: Some elements in A and B may not be mapped to any
elements in the other set
©Silberschatz, Korth and Sudarshan 7.19 Database System Concepts - 7th Edition
n Must consider the mapping cardinality of the relationship set when
deciding what are the candidate keys
n One to One, One to Many and Many to Many have different primary
keys
n Many-to-Many relationships. The preceding union of the primary
keys is a minimal superkey and is chosen as the primary key. n One-to-Many relationships. The primary key of the “Many” side is a
minimal superkey and is used as the primary key. n Many-to-one relationships. The primary key of the “Many” side is a
minimal superkey and is used as the primary key. n One-to-one relationships. The primary key of either one of the
participating entity sets forms a minimal superkey, and either one
can be chosen as the primary key.
©Silberschatz, Korth and Sudarshan 7.20 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.21 Database System Concepts - 7th Edition
n Rectangles represent entity sets. n Diamonds represent relationship sets. n Attributes listed inside entity rectangle
n Underline indicates primary key attributes
n Lines represent mapping cardinalities
©Silberschatz, Korth and Sudarshan 7.22 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.23 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.24 Database System Concepts - 7th Edition
n Entity sets of a relationship need not be distinct
l Each occurrence of an entity set plays a “role” in the relationship
n The labels “course_id” and “prereq_id” are called roles.
©Silberschatz, Korth and Sudarshan 7.25 Database System Concepts - 7th Edition
n We express cardinality constraints by drawing either a directed line
(), signifying “one,” or an undirected line (—), signifying “many,” between the relationship set and the entity set.
©Silberschatz, Korth and Sudarshan 7.26 Database System Concepts - 7th Edition
n one-to-one relationship between an instructor and a student
l an instructor is associated with at most one student via advisor
l and a student is associated with at most one instructor via
advisor
©Silberschatz, Korth and Sudarshan 7.27 Database System Concepts - 7th Edition
n one-to-many relationship between an instructor and a student
l an instructor is associated with several (including 0) students
via advisor
l a student is associated with at most one instructor via advisor,
©Silberschatz, Korth and Sudarshan 7.28 Database System Concepts - 7th Edition
n In a many-to-one relationship between an instructor and a student, l an instructor is associated with at most one student via
advisor, l and a student is associated with several (including 0)
instructors via advisor
©Silberschatz, Korth and Sudarshan 7.29 Database System Concepts - 7th Edition
n An instructor is associated with several (possibly 0) students via
advisor
n A student is associated with several (possibly 0) instructors via
advisor
©Silberschatz, Korth and Sudarshan 7.30 Database System Concepts - 7th Edition
n Total participation (indicated by double line): every entity in the entity set
participates in at least one relationship in the relationship set
l E.g., participation of section in sec_course is total
4 every section must have an associated course
n Partial participation: some entities may not participate in any relationship in
the relationship set
l Example: participation of instructor in advisor is partial
©Silberschatz, Korth and Sudarshan 7.31 Database System Concepts - 7th Edition
n Cardinality limits can also express participation constraints
©Silberschatz, Korth and Sudarshan 7.32 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.33 Database System Concepts - 7th Edition
n We allow at most one arrow out of a ternary (or greater degree)
relationship to indicate a cardinality constraint
n E.g., an arrow from proj_guide to instructor indicates each student has
at most one guide for a project
n If there is more than one arrow, there are two ways of defining the
meaning. l E.g., a ternary relationship R between A, B and C with arrows to B
and C could mean
1. each A entity is associated with a unique entity from B and C or
2. each pair of entities from (A, B) is associated with a unique C
entity, and each pair (A, C) is associated with a unique B
l Each alternative has been used in different formalisms
l To avoid confusion we outlaw more than one arrow
Database System Concepts, 7th Ed. ©Silberschatz, Korth and Sudarshan
See www.db-book.com for conditions on re-use
Draw an ER diagram for application about the campus ID cards used in
Zhejiang University. Entities include students, campus ID cards, position of
sales machines (POS, the machines that read and write campus ID information
when consuming), places that students consume (stores, canteens). The
application should store the balance in each card, and how much a card
consumes every time. The information about commodities and foods that the
students buy is not required.
©Silberschatz, Korth and Sudarshan 7.35 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.36 Database System Concepts - 7th Edition
n An entity set that does not have a primary key is referred to as a
weak entity set. n The existence of a weak entity set depends on the existence of a
identifying entity set
l It must relate to the identifying entity set via a total, one-to-many
relationship set from the identifying to the weak entity set
l Identifying relationship depicted using a double diamond
n The primary key of a weak entity set is formed by the primary key of
the strong entity set on which the weak entity set is existence
dependent, plus the weak entity set’s discriminator (or partial key) .
©Silberschatz, Korth and Sudarshan 7.37 Database System Concepts - 7th Edition
n We underline the discriminator of a weak entity set with a dashed
line. n We put the identifying relationship of a weak entity in a double
diamond. n Primary key for section – (course_id, sec_id, semester, year)
©Silberschatz, Korth and Sudarshan 7.38 Database System Concepts - 7th Edition
n Note: the primary key of the strong entity set is not explicitly stored
with the weak entity set, since it is implicit in the identifying
relationship. n If course_id were explicitly stored, section could be made a strong
entity, but then the relationship between section and course would
be duplicated by an implicit relationship defined by the attribute
course_id common to course and section
©Silberschatz, Korth and Sudarshan 7.39 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.40 Database System Concepts - 7th Edition
Reduction to Relational Schemas
©Silberschatz, Korth and Sudarshan 7.41 Database System Concepts - 7th Edition
n Entity sets and relationship sets can be expressed uniformly as
relation schemas that represent the contents of the database. n A database which conforms to an E-R diagram can be represented by
a collection of schemas. n For each entity set there is a unique schema that is assigned the
name of the corresponding entity. n For each relationship set, schema will be created or not based on the
mapping cardinalities
n For each multivalued attribute, there will be a seperate schema for that
attribute. n Each schema has a number of columns (generally corresponding to
attributes), which have unique names.
©Silberschatz, Korth and Sudarshan 7.42 Database System Concepts - 7th Edition
n A strong entity set reduces to a schema with the same attributes
student(ID, name, tot_cred)
n A weak entity set becomes a table that includes a column for the primary
key of the identifying strong entity set
section ( course_id, sec_id, sem, year )
©Silberschatz, Korth and Sudarshan 7.43 Database System Concepts - 7th Edition
n A many-to-many relationship set is represented as a schema with
attributes for the primary keys of the two participating entity sets, and any
descriptive attributes of the relationship set. n Example: schema for relationship set advisor
advisor = (s_id, i_id)
©Silberschatz, Korth and Sudarshan 7.44 Database System Concepts - 7th Edition
n Many-to-one and one-to-many relationship sets that are total on the many-side
can be represented by adding an extra attribute to the “many” side, containing
the primary key of the “one” side
n Example: Instead of creating a schema for relationship set inst_dept, add an
attribute dept_name to the schema arising from entity set instructor
©Silberschatz, Korth and Sudarshan 7.45 Database System Concepts - 7th Edition
n For one-to-one relationship sets, either side can be chosen to act
as the “many” side
l That is, extra attribute can be added to either of the tables
corresponding to the two entity sets
n If participation is partial on the “many” side, replacing a schema by
an extra attribute in the schema corresponding to the “many” side
could result in null values
n The schema corresponding to a relationship set linking a weak
entity set to its identifying strong entity set is redundant. l Example: The section schema already contains the attributes
that would appear in the sec_course schema
©Silberschatz, Korth and Sudarshan 7.46 Database System Concepts - 7th Edition
n Composite attributes are flattened out by creating a
separate attribute for each component attribute
l Example: given entity set instructor with
composite attribute name with component
attributes first_name and last_name the schema
corresponding to the entity set has two attributes
name_first_name and name_last_name
4 Prefix omitted if there is no ambiguity
n Ignoring multivalued attributes, extended instructor
schema is
l instructor(ID,
first_name, middle_initial, last_name, street_number, street_name, apt_number, city, state, zip_code, date_of_birth)
©Silberschatz, Korth and Sudarshan 7.47 Database System Concepts - 7th Edition
n A multivalued attribute M of an entity E is represented by a separate
schema EM
l Schema EM has attributes corresponding to the primary key of E
and an attribute corresponding to multivalued attribute M
l Example: Multivalued attribute phone_number of instructor is
represented by a schema:
inst_phone= ( ID, phone_number)
l Each value of the multivalued attribute maps to a separate tuple of
the relation on schema EM
4 For example, an instructor entity with primary key 22222 and
phone numbers 456-7890 and 123-4567 maps to two tuples:
(22222, 456-7890) and (22222, 123-4567)
©Silberschatz, Korth and Sudarshan 7.48 Database System Concepts - 7th Edition
n Special case:entity time_slot has only one attribute other than the
primary-key attribute, and that attribute is multivalued
l Optimization: Don’t create the relation corresponding to the entity,
just create the one corresponding to the multivalued attribute
l time_slot(time_slot_id, day, start_time, end_time)
l time_slot attribute of section (from sec_time_slot) cannot be a
foreign key due to this optimization
©Silberschatz, Korth and Sudarshan 7.49 Database System Concepts - 7th Edition
Extended ER Features
©Silberschatz, Korth and Sudarshan 7.50 Database System Concepts - 7th Edition
n Top-down design process; we designate subgroupings within an entity set
that are distinctive from other entities in the set. n These subgroupings become lower-level entity sets that have attributes or
participate in relationships that do not apply to the higher-level entity set. n Depicted by a triangle component labeled ISA (E.g., instructor “is a” person). n Attribute inheritance – a lower-level entity set inherits all the attributes
and relationship participation of the higher-level entity set to which it is
linked.
©Silberschatz, Korth and Sudarshan 7.51 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.52 Database System Concepts - 7th Edition
n A bottom-up design process – combine a number of entity sets
that share the same features into a higher-level entity set. n Specialization and generalization are simple inversions of each
other; they are represented in an E-R diagram in the same way. n The terms specialization and generalization are used
interchangeably.
©Silberschatz, Korth and Sudarshan 7.53 Database System Concepts - 7th Edition
n Can have multiple specializations of an entity set based on different
features. n E.g., permanent_employee vs. temporary_employee, in addition to
instructor vs. secretary
n Each particular employee would be
l a member of one of permanent_employee or temporary_employee, l and also a member of one of instructor, secretary
n The ISA relationship also referred to as superclass - subclass
relationship
©Silberschatz, Korth and Sudarshan 7.54 Database System Concepts - 7th Edition
n Constraint on which entities can be members of a given lower-level entity
set. l condition-defined
4 Example: all customers over 65 years are members of senior- citizen entity set; senior-citizen ISA person. l user-defined
n Constraint on whether or not entities may belong to more than one lower￾level entity set within a single generalization. l Disjoint
4 an entity can belong to only one lower-level entity set
4 Noted in E-R diagram by having multiple lower-level entity sets link
to the same triangle
l Overlapping
4 an entity can belong to more than one lower-level entity set
©Silberschatz, Korth and Sudarshan 7.55 Database System Concepts - 7th Edition
n Completeness constraint -- specifies whether or not an entity in
the higher-level entity set must belong to at least one of the lower￾level entity sets within a generalization. l total: an entity must belong to one of the lower-level entity sets
l partial: an entity need not belong to one of the lower-level
entity sets
©Silberschatz, Korth and Sudarshan 7.56 Database System Concepts - 7th Edition
n Consider the ternary relationship proj_guide, which we saw earlier
n Suppose in some circumstances we want to record evaluations of a student by a
guide on a project
©Silberschatz, Korth and Sudarshan 7.57 Database System Concepts - 7th Edition
n Relationship sets eval_for and proj_guide represent overlapping
information
l Every eval_for relationship corresponds to a proj_guide
relationship
l However, some proj_guide relationships may not correspond to
any eval_for relationships
4 So we can’t discard the proj_guide relationship
n Eliminate this redundancy via aggregation
l Treat relationship as an abstract entity
l Allows relationships between relationships
l Abstraction of relationship into new entity
©Silberschatz, Korth and Sudarshan 7.58 Database System Concepts - 7th Edition
n Without introducing redundancy, the following diagram represents:
l A student is guided by a particular instructor on a particular project
l A student, instructor, project combination may have an associated
evaluation
©Silberschatz, Korth and Sudarshan 7.59 Database System Concepts - 7th Edition
n Method 1:
l Form a schema for the higher-level entity
l Form a schema for each lower-level entity set, include primary key
of higher-level entity set and local attributes
schema attributes
person ID, name, street, city
student ID, tot_cred
employee ID, salary
l Drawback: getting information about, an employee requires
accessing two relations, the one corresponding to the low-level
schema and the one corresponding to the high-level schema
©Silberschatz, Korth and Sudarshan 7.60 Database System Concepts - 7th Edition
n Method 2:
l Form a schema for each entity set with all local and inherited attributes
schema attributes
person ID, name, street, city
student ID, name, street, city, tot_cred
employee ID, name, street, city, salary
l If specialization is total, the schema for the generalized entity set
(person) is not required to store information
4 Can be defined as a “view” relation containing union of
specialization relations
4 But explicit schema may still be needed for foreign key constraints
l Drawback: name, street and city may be stored redundantly for people
who are both students and employees
©Silberschatz, Korth and Sudarshan 7.61 Database System Concepts - 7th Edition
n To represent aggregation, create a schema containing
l primary key of the aggregated relationship, l the primary key of the associated entity set
l any descriptive attributes
©Silberschatz, Korth and Sudarshan 7.62 Database System Concepts - 7th Edition
n For example, to represent aggregation eval_for between relationship
proj_guide and entity set evaluation, create a schema
eval_for (s_ID, project_id, i_ID, evaluation_id)
n Schema proj_guide is redundant provided we are willing to store null values
for attribute evaluation_id in relation on schema eval_for
©Silberschatz, Korth and Sudarshan 7.63 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.64 Database System Concepts - 7th Edition
n Use of entity sets vs. attributes
n Use of phone as an entity allows extra information about phone numbers
(plus multiple phone numbers)
©Silberschatz, Korth and Sudarshan 7.65 Database System Concepts - 7th Edition
n Use of entity sets vs. relationship sets
Possible guideline is to designate a relationship set to describe an action
that occurs between entities
©Silberschatz, Korth and Sudarshan 7.66 Database System Concepts - 7th Edition
n Binary versus n-ary relationship sets
Although it is possible to replace any nonbinary (n-ary, for n > 2)
relationship set by a number of distinct binary relationship sets, a n-ary
relationship set shows more clearly that several entities participate in a
single relationship. n Placement of relationship attributes
n The use of a strong or weak entity set
n The use of specialization/generalization
n The use of aggregation – can treat the aggregate entity set as a single
unit without concern for the details of its internal structure.
©Silberschatz, Korth and Sudarshan 7.67 Database System Concepts - 7th Edition
n Some relationships that appear to be non-binary may be better
represented using binary relationships
l E.g., A ternary relationship parents, relating a child to his/her
father and mother, is best replaced by two binary relationships,
father and mother
4 Using two binary relationships allows partial information (e.g., only mother being know)
l But there are some relationships that are naturally non-binary
4 Example: proj_guide
©Silberschatz, Korth and Sudarshan 7.68 Database System Concepts - 7th Edition
n In general, any non-binary relationship can be represented using
binary relationships by creating an artificial entity set. l Replace R between entity sets A, B and C by an entity set E, and
three relationship sets:
1. RA, relating E and A 2. RB, relating E and B
3. RC, relating E and C
l Create a special identifying attribute for E
l Add any attributes of R to E
l For each relationship (ai , bi , ci) in R, create
1. a new entity ei in the entity set E 2. add (ei , ai ) to RA
3. add (ei , bi ) to RB 4. add (ei , ci ) to RC
©Silberschatz, Korth and Sudarshan 7.69 Database System Concepts - 7th Edition
n Also need to translate constraints
l Translating all constraints may not be possible
l There may be instances in the translated schema that
cannot correspond to any instance of R
4 Exercise: add constraints to the relationships RA, RB and
RC to ensure that a newly created entity corresponds to
exactly one entity in each of entity sets A, B and C
l We can avoid creating an identifying attribute by making E a
weak entity set (described shortly) identified by the three
relationship sets
©Silberschatz, Korth and Sudarshan 7.70 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.71 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 7.72 Database System Concepts - 7th Edition
n Chen, IDE1FX, …
©Silberschatz, Korth and Sudarshan 7.73 Database System Concepts - 7th Edition
Chen IDE1FX (Crows feet notation)
Database System Concepts, 7th Ed. ©Silberschatz, Korth and Sudarshan
See www.db-book.com for conditions on re-use
