Database System Concepts, 7th Ed. ©Silberschatz, Korth and Sudarshan
See www.db-book.com for conditions on re-use
©Silberschatz, Korth and Sudarshan 12.2 Database System Concepts - 7th Edition
n Overview
n Measures of Query Cost
n Selection Operation
n Sorting
n Join Operation
n Other Operations
n Evaluation of Expressions
©Silberschatz, Korth and Sudarshan 12.3 Database System Concepts - 7th Edition
1. Parsing and translation
2. Optimization
3. Evaluation
©Silberschatz, Korth and Sudarshan 12.4 Database System Concepts - 7th Edition
n Parsing and translation
l translate the query into its internal form. This is then
translated into relational algebra. l Parser checks syntax, verifies relations
n Optimization: see next two slides
n Evaluation
l The query-execution engine takes a query-evaluation plan,
executes that plan, and returns the answers to the query.
©Silberschatz, Korth and Sudarshan 12.5 Database System Concepts - 7th Edition
n A relational algebra expression may have many equivalent
expressions
l E.g., salary75000
(salary(instructor)) is equivalent to
salary
(salary75000
(instructor))
n Each relational algebra operation can be evaluated using one of
several different algorithms
l Correspondingly, a relational-algebra expression can be
evaluated in many ways. n Annotated expression specifying detailed evaluation strategy is
called an evaluation-plan. l E.g., can use an index on salary to find instructors with salary
< 75000,
l or can perform complete relation scan and discard instructors
with salary  75000
©Silberschatz, Korth and Sudarshan 12.6 Database System Concepts - 7th Edition
n Amongst all equivalent evaluation plans， choose the one with lowest cost. l Cost is estimated using statistical information from the
database catalog
4 e.g. number of tuples in each relation, size of tuples, etc. n In this chapter we study
l Basic parameters to measure cost of a relational algebra operation
l Algorithms for evaluating relational algebra operations
l How to combine algorithms for individual operations in order to evaluate a
complete expression
n In Chapter 16
l We study how to find an evaluation plan with lowest estimated cost
©Silberschatz, Korth and Sudarshan 12.7 Database System Concepts - 7th Edition
n Cost is generally measured as total elapsed time for answering
query
l Many factors contribute to time cost
4 disk accesses, CPU, or even network communication
n Typically disk access is the predominant cost, and is also
relatively easy to estimate. Measured by taking into account
l Number of seeks * average-seek-cost
l Number of blocks read * average-block-read-cost
l Number of blocks written * average-block-write-cost
4 Cost to write a block is greater than cost to read a block
– data is read back after being written to ensure that the
write was successful
©Silberschatz, Korth and Sudarshan 12.8 Database System Concepts - 7th Edition
n For simplicity we just use the number of block transfers from disk
and the number of seeks as the cost measures
l tT – time to transfer one block
l tS – time for one seek
l Cost for b block transfers plus S seeks
b * tT + S * tS
n tS and tT depend on where data is stored; with 4 KB blocks:
l High end magnetic disk: tS = 4 msec and tT =0.1 msec
l SSD: tS = 20-90 microsec and tT = 2-10 microsec for 4KB
n We ignore CPU costs for simplicity
l Real systems do take CPU cost into account
n We do not include cost to writing ultimate output to disk in our cost
formulae
©Silberschatz, Korth and Sudarshan 12.9 Database System Concepts - 7th Edition
n Several algorithms can reduce disk IO by using extra buffer
space
l Amount of real memory available to buffer depends on other
concurrent queries and OS processes, known only during
execution
4 We often use worst case estimates, assuming only the
minimum amount of memory needed for the operation is
available
n Required data may be buffer resident already, avoiding disk I/O
l But hard to take into account for cost estimation
©Silberschatz, Korth and Sudarshan 12.10 Database System Concepts - 7th Edition
n File scan
n Algorithm A1 (linear search). Scan each file block and test all
records to see whether they satisfy the selection condition. l Cost estimate = br block transfers + 1 seek (assume the file is
stored contiguously)
4 br denotes number of blocks containing records from relation r
l If selection is on a key attribute, can stop on finding record
4 cost = (br /2) block transfers (average)+ 1 seek
l Linear search can be applied regardless of
4 selection condition or
4 ordering of records in the file, or
4 availability of indices
n Note: binary search generally does not make sense since data is not
stored consecutively
l except when there is an index available, l and binary search requires more seeks than index search
©Silberschatz, Korth and Sudarshan 12.11 Database System Concepts - 7th Edition
n Index scan – search algorithms that use an index
l selection condition must be on search-key of index. n A2 (primary index, equality on key). Retrieve a single record
that satisfies the corresponding equality condition
l Cost = (hi + 1) * (tT + tS)
n A3 (primary index, equality on nonkey) Retrieve multiple
records. l Assume records will be on consecutive blocks
4 Let b = number of blocks containing matching records
l Cost = hi
* (tT + tS) + tS + tT
* b
©Silberschatz, Korth and Sudarshan 12.12 Database System Concepts - 7th Edition
n A4 (secondary index, equality on nonkey). l Retrieve a single record if the search-key is a candidate key
4 Cost = (hi + 1) * (tT + tS)
l Retrieve multiple records if search-key is not a candidate key
4 each of n matching records may be on a different block
4 Cost = (hi + n) * (tT + tS) – Can be very expensive!
©Silberschatz, Korth and Sudarshan 12.13 Database System Concepts - 7th Edition
n Can implement selections of the form AV (r) or A  V(r) by using
l a linear file scan,
l or by using indices in the following ways:
n A5 (primary index, comparison). (Relation is sorted on A)
4 For A  V(r) use index to find first tuple  v and scan relation
sequentially from there
4 For AV (r) just scan relation sequentially till first tuple > v; do not
use index
n A6 (secondary index, comparison). 4 For A  V(r) use index to find first index entry  v and scan index
sequentially from there, to find pointers to records. 4 For AV (r) just scan leaf pages of index finding pointers to
records, till first entry > v
4 In either case, retrieve records that are pointed to
– requires an I/O for each record
– Linear file scan may be cheaper
©Silberschatz, Korth and Sudarshan 12.14 Database System Concepts - 7th Edition
n Conjunction: 1 2. . . n
(r)
n A7 (conjunctive selection using one index). l Select a combination of i and algorithms A2 through A6 that
results in the least cost for i (r). l Test other conditions on tuple after fetching it into memory buffer. n A8 (conjunctive selection using composite index). l Use appropriate composite (multiple-key) index if available. n A9 (conjunctive selection by intersection of identifiers). l Requires indices with record pointers. l Use corresponding index for each condition, and take intersection
of all the obtained sets of record pointers. l Then fetch records from file
l If some conditions do not have appropriate indices, apply test in
memory.
©Silberschatz, Korth and Sudarshan 12.15 Database System Concepts - 7th Edition
n Disjunction:1 2 . . . n
(r). n A10 (disjunctive selection by union of identifiers). l Applicable if all conditions have available indices. 4 Otherwise use linear scan. l Use corresponding index for each condition, and take union
of all the obtained sets of record pointers. l Then fetch records from file
n Negation: 
(r)
l Use linear scan on file
l If very few records satisfy , and an index is applicable to 
4 Find satisfying records using index and fetch from file
©Silberschatz, Korth and Sudarshan 12.16 Database System Concepts - 7th Edition
n We may build an index on the relation, and then use the index to read the
relation in sorted order. May lead to one disk block access for each tuple. n For relations that fit in memory, techniques like quicksort can be used. For
relations that don
’t fit in memory, external
sort-merge is a good choice.
©Silberschatz, Korth and Sudarshan 12.17 Database System Concepts - 7th Edition
g
a
d 31
c 33
b 14
e 16
r 16
d 21
m 3
p 2
d 7
a 14
a 14
a 19
b 14
c 33
d 7
d 21
d 31
e 16
g 24
m 3
p 2
r 16
a 19
b 14
c 33
d 31
e 16
g 24
a 14
d 7
d 21
m 3
p 2
r 16
a 19
d 31
g 24
b 14
c 33
e 16
d 21
m 3
r 16
a 14
d 7
p 2
initial
relation
create
runs
merge
pass–1
merge
pass–2
runs runs
sorted
output
24
19
©Silberschatz, Korth and Sudarshan 12.18 Database System Concepts - 7th Edition
1. Create sorted runs. Let i be 0 initially. Repeatedly do the following till the end of the relation:
(a) Read M blocks of relation into memory
(b) Sort the in-memory blocks
(c) Write sorted data to run Ri; increment i. The total number of runs N =  br/M 
2. Merge the runs (next slide)…..
Let M denote memory size (in pages). br as block number of data file
©Silberschatz, Korth and Sudarshan 12.19 Database System Concepts - 7th Edition
2. Merge the runs (N-way merge). We assume (for now) that N < M. 1. Use N blocks of memory to buffer input runs, and 1 block to buffer output. Read
the first block of each run into its buffer page
2. repeat
1. Select the first record (in sort order) among all buffer pages
2. Write the record to the output buffer. If the output buffer is full write it to disk. 3. Delete the record from its input buffer page.
If the buffer page becomes empty then
read the next block (if any) of the run into the buffer. 3. until all input buffer pages are empty:
©Silberschatz, Korth and Sudarshan 12.20 Database System Concepts - 7th Edition
n If N  M (or block size br of original file is equal or greater than
M2), several merge passes are required. l In each pass, contiguous groups of M - 1 runs are merged. l A pass reduces the number of runs by a factor of M -1, and
creates runs longer by the same factor. 4 E.g. If M=11, and there are 90 runs, one pass reduces
the number of runs to 9, each 10 times the size of the
initial runs
l Repeated passes are performed till all runs have been
merged into one.
©Silberschatz, Korth and Sudarshan 12.21 Database System Concepts - 7th Edition
M bb
1
n
n-1
©Silberschatz, Korth and Sudarshan 12.22 Database System Concepts - 7th Edition
n Cost analysis:
l 1 block per run leads to too many seeks during merge
4 Instead use bb buffer blocks per run
 read/write bb blocks at a time
4 Can merge M/bb–1 runs in one pass
l Total number of merge passes required: log M/bb–1
(br/M). l e.g, br
=1000, M=10, bb=2, number of merge passes is log 4100 = 4
l Block transfers for initial run creation as well as in each pass is 2br
4 for final pass, we don
’t count write cost – we ignore final write cost for all operations since the output of an operation may be
sent to the parent operation without being written to disk
4 Thus total number of block transfers for external sorting:
br ( 2 log M/bb–1
(br / M) + 1)
l Seeks: next slide
©Silberschatz, Korth and Sudarshan 12.23 Database System Concepts - 7th Edition
n Cost of seeks
l To find the number of seeks, need to know how many blocks (b) the
algorithm can read or write before the next read or write. And how many
blocks (B) the algorithm need to read or write altogether. Then the total
number of seek is  B/b 
l During run generation: one seek to read each run and one seek to write
each run
4 2 br / M
l During the merge phase
4 Need 2 br / bb seeks for each merge pass (may be more, because
number of blocks in each run may not be the integral multiple of bb
) – except the final one which does not require a write
4 Total number of seeks:
2 br / M + br / bb (2 logM/bb–1
(br / M) -1)
©Silberschatz, Korth and Sudarshan 12.24 Database System Concepts - 7th Edition
n Several different algorithms to implement joins
l Nested-loop join
l Block nested-loop join
l Indexed nested-loop join
l Merge-join
l Hash-join
n Choice based on cost estimate
n Examples use the following information
l Number of records of student: 5,000 takes: 10,000
l Number of blocks of student: 100 takes: 400
©Silberschatz, Korth and Sudarshan 12.25 Database System Concepts - 7th Edition
n To compute the theta join r  s
for each tuple t
r in r do begin
for each tuple ts
in s do begin
test pair (t
r,ts
) to see if they satisfy the join condition 
if they do, add t
r
• ts
to the result. end
end
n r is called the outer relation and s the inner relation of the join. n Requires no indices and can be used with any kind of join
condition. n Expensive since it examines every pair of tuples in the two
relations.
©Silberschatz, Korth and Sudarshan 12.26 Database System Concepts - 7th Edition
n In the worst case, if there is enough memory only to hold one block of each
relation, the estimated cost is
nr  bs + br block transfers, plus
nr + br seeks
n If the smaller relation fits entirely in memory, use that as the inner relation. l Reduces cost to br + bs block transfers and 2 seeks
n Assuming worst case memory availability cost estimate is
l with student as outer relation:
4 5000  400 + 100 = 2,000,100 block transfers, 4 5000 + 100 = 5100 seeks
l with takes as the outer relation
4 10000  100 + 400 = 1,000,400 block transfers and 10,400 seeks
n If smaller relation (student) fits entirely in memory, the cost estimate will be
500 block transfers. n Block nested-loops algorithm (next slide) is preferable.
©Silberschatz, Korth and Sudarshan 12.27 Database System Concepts - 7th Edition
n Variant of nested-loop join in which every block of inner
relation is paired with every block of outer relation. for each block Br of r do begin
for each block Bs of s do begin
for each tuple t
r in Br do begin
for each tuple ts
in Bs do begin
Check if (t
r,ts
) satisfy the join condition
if they do, add t
r
• ts
to the result. end
end
end
end
©Silberschatz, Korth and Sudarshan 12.28 Database System Concepts - 7th Edition
n Worst case estimate: br  bs + br block transfers + 2 * br seeks
l Each block in the inner relation s is read once for each block
in the outer relation
n Best case: br + bs block transfers + 2 seeks. n Improvements to nested loop and block nested loop algorithms:
l In block nested-loop, use M — 2 disk blocks as blocking unit
for outer relations, where M = memory size in blocks; use
remaining two blocks to buffer inner relation and output
4 Cost = br / (M-2)  bs + br block transfers +
2 br / (M-2) seeks
l If equi-join attribute forms a key on inner relation, stop inner
loop on first match
l Scan inner loop forward and backward alternately, to make
use of the blocks remaining in buffer (with LRU replacement)
l Use index on inner relation if available (next slide)
©Silberschatz, Korth and Sudarshan 12.29 Database System Concepts - 7th Edition
n Index lookups can replace file scans if
l join is an equi-join or natural join and
l an index is available on the inner relation
’
s join attribute
4 Can construct an index just to compute a join. n For each tuple t
r
in the outer relation r, use the index to look up
tuples in s that satisfy the join condition with tuple t
r. n Worst case: buffer has space for only one page of r, and, for each
tuple in r, we perform an index lookup on s. n Cost of the join: br (tT + tS) + nr  c
l Where c is the cost of traversing index and fetching all matching s
tuples for one tuple or r
l c can be estimated as cost of a single selection on s using the join
condition. n If indices are available on join attributes of both r and s,
use the relation with fewer tuples as the outer relation.
©Silberschatz, Korth and Sudarshan 12.30 Database System Concepts - 7th Edition
n Compute student takes, with student as the outer relation. n Let takes have a primary B+-tree index on the attribute ID, which contains 20 entries in each
index node. n Since takes has 10,000 tuples, the height of the tree is 4, and one more access is needed to
find the actual data
n student has 5000 tuples
n Cost of block nested loops join
l 400*100 + 100 = 40,100 block transfers + 2 * 100 = 200 seeks
4 assuming worst case memory
4 may be significantly less with more memory
n Cost of indexed nested loops join
l 100 + 5000 * 5 = 25,100 block transfers and seeks. l CPU cost likely to be less than that for block nested loops join
©Silberschatz, Korth and Sudarshan 12.31 Database System Concepts - 7th Edition
1. Sort both relations on their join attribute (if not already sorted on
the join attributes). 2. Merge the sorted relations to join them
1. Join step is similar to the merge stage of the sort-merge
algorithm. 2. Main difference is handling of duplicate values in join
attribute — every pair with same value on join attribute must
be matched
3. Detailed algorithm in book
©Silberschatz, Korth and Sudarshan 12.32 Database System Concepts - 7th Edition
n Can be used only for equi-joins and natural joins
n Each block needs to be read only once (assuming all tuples for any
given value of the join attributes fit in memory
n Thus the cost of merge join is:
br + bs block transfers + br / bb + bs
/ bb seeks
l + the cost of sorting if relations are unsorted. n hybrid merge-join: If one relation is sorted, and the other has a
secondary B+-tree index on the join attribute
l Merge the sorted relation with the leaf entries of the B+-tree . l Sort the result on the addresses of the unsorted relation
’
s tuples
l Scan the unsorted relation in physical address order and merge
with previous result, to replace addresses by the actual tuples
4 Sequential scan more efficient than random lookup
©Silberschatz, Korth and Sudarshan 12.33 Database System Concepts - 7th Edition
n Applicable for equi-joins and natural joins. n A hash function h is used to partition tuples of both relations
n h maps JoinAttrs values to {0, 1, ..., n}, where JoinAttrs denotes the
common attributes of r and s used in the natural join. l r0
, r1
, . . ., rn denote partitions of r tuples
4 Each tuple tr  r is put in partition r
i where i = h(tr
[JoinAttrs]). l s0
,, s1
. . ., sn denotes partitions of s tuples
4 Each tuple ts s is put in partition si, where i = h(ts
[JoinAttrs]). n Note: In book, r
i is denoted as Hri, si is denoted as Hsi and
n is denoted as nh.
©Silberschatz, Korth and Sudarshan 12.34 Database System Concepts - 7th Edition
©Silberschatz, Korth and Sudarshan 12.35 Database System Concepts - 7th Edition
n r tuples in ri need only to be compared with s tuples in si
Need not be compared with s tuples in any other partition,
since:
l an r tuple and an s tuple that satisfy the join condition
will have the same value for the join attributes. l If that value is hashed to some value i, the r tuple has
to be in ri and the s tuple in si.
©Silberschatz, Korth and Sudarshan 12.36 Database System Concepts - 7th Edition
1. Partition the relation s using hashing function h. When
partitioning a relation, one block of memory is reserved as
the output buffer for each partition. 2. Partition r similarly. 3. For each i:
(a) Load si into memory and build an in-memory hash index
on it using the join attribute. This hash index uses a
different hash function than the earlier one h. (b) Read the tuples in ri from the disk one by one. For each
tuple tr locate each matching tuple ts
in si using the in- memory hash index. Output the concatenation of their
attributes.
The hash-join of r and s is computed as follows.
Relation s is called the build input and r is called the probe input.
©Silberschatz, Korth and Sudarshan 12.37 Database System Concepts - 7th Edition
M bb
br
bs
0 1 n
©Silberschatz, Korth and Sudarshan 12.38 Database System Concepts - 7th Edition
n The value n and the hash function h is chosen such that each
si should fit in memory. l Typically n is chosen as bs
/M * f where f is a
“fudge
factor
”
, typically around 1.2
l The probe relation partitions r
i need not fit in memory
n Recursive partitioning required if number of partitions n is
greater than number of pages M of memory. l instead of partitioning n ways, use M – 1 partitions for s
l Further partition the M – 1 partitions using a different hash
function
l Use same partitioning method on r
l Rarely required: e.g., with block size of 4 KB, recursive
partitioning not needed for relations of < 1GB with memory
size of 2MB, or relations of < 36 GB with memory of 12 MB
©Silberschatz, Korth and Sudarshan 12.39 Database System Concepts - 7th Edition
n Partitioning is said to be skewed if some partitions have significantly
more tuples than some others
n Hash-table overflow occurs in partition si if si does not fit in memory. Reasons could be
l Many tuples in s with same value for join attributes
l Bad hash function
n Overflow resolution can be done in build phase
l Partition si is further partitioned using different hash function. l Partition ri must be similarly partitioned. n Overflow avoidance performs partitioning carefully to avoid overflows
during build phase
l E.g. partition build relation into many partitions, then combine them
n Both approaches fail with large numbers of duplicates
l Fallback option: use block nested loops join on overflowed partitions
©Silberschatz, Korth and Sudarshan 12.40 Database System Concepts - 7th Edition
n If recursive partitioning is not required: cost of hash join is
n Transfers: 2(br + bs) +2 nh
(partition)+ (br + bs) +2  nh
(build and
probe)
n Seeks: 2( br / bb + bs
/ bb) (partition)+ 2nh seeks(build and
probe)
n If recursive partitioning required:
l number of passes required for partitioning build relation s to
less than M blocks per partition is logM/bb–1
(bs
/M)
l best to choose the smaller relation as the build relation. l Total cost estimate is:
2(br + bs)logM/bb–1
(bs
/M) + br + bs block transfers +
2(br / bb + bs
/ bb) logM/bb–1
(bs
/M)  seeks
n If the entire build input can be kept in main memory no
partitioning is required
l Cost estimate goes down to br + bs
.
©Silberschatz, Korth and Sudarshan 12.41 Database System Concepts - 7th Edition
n Assume that memory size is 20 blocks
n binstructor
= 100 and bteaches
= 400. n instructor is to be used as build input. Partition it into five
partitions, each of size 20 blocks（most optimistic）. This
partitioning can be done in one pass. n Similarly, partition teaches into five partitions, each of size 80. This is also done in one pass. n M = 20，n = 5， bb =  M / （n+1）  =  20/ 6  = 3
n Therefore total cost, ignoring cost of writing partially filled
blocks:
l 3(100 + 400) = 1500 block transfers +
2( 100/ bb  + 400/ bb ) + 2*5 = 346 seeks
instructor teaches
©Silberschatz, Korth and Sudarshan 12.42 Database System Concepts - 7th Edition
n Useful when memory sized are relatively large, and the build
input is bigger than memory. n Main feature of hybrid hash join:
Keep the first partition of the build relation in memory. n E.g. With memory size of 25 blocks, instructor can be partitioned
into five partitions, each of size 20 blocks. l Division of memory:
4 The first partition occupies 20 blocks of memory
4 1 block is used for input, and 1 block each for buffering the other
4 partitions. n teaches is similarly partitioned into five partitions each of size 80
l the first is used right away for probing, instead of being written out
n Cost of 3(80 + 320) + 20 +80 = 1300 block transfers for
hybrid hash join, instead of 1500 with plain hash-join. n Hybrid hash-join most useful if M >> bs
©Silberschatz, Korth and Sudarshan 12.43 Database System Concepts - 7th Edition
n Join with a conjunctive condition:
r 1  2...   n s
l Either use nested loops/block nested loops, or
l Compute the result of one of the simpler joins r i s
4 final result comprises those tuples in the intermediate result
that satisfy the remaining conditions
1 . . .  i –1  i +1  . . .  n
n Join with a disjunctive condition
r 1  2 ...  n s
l Either use nested loops/block nested loops, or
l Compute as the union of the records in individual joins r  i s:
(r 1 s)  (r 2 s)  . . .  (r n s)
©Silberschatz, Korth and Sudarshan 12.44 Database System Concepts - 7th Edition
n Duplicate elimination can be implemented via hashing or
sorting. l On sorting duplicates will come adjacent to each other, and all
but one set of duplicates can be deleted. l Optimization: duplicates can be deleted during run generation
as well as at intermediate merge steps in external sort-merge. l Hashing is similar – duplicates will come into the same
bucket. n Projection:
l perform projection on each tuple
l followed by duplicate elimination.
©Silberschatz, Korth and Sudarshan 12.45 Database System Concepts - 7th Edition
n Aggregation can be implemented in a manner similar to duplicate
elimination. l Sorting or hashing can be used to bring tuples in the same
group together, and then the aggregate functions can be
applied on each group. l Optimization: combine tuples in the same group during run
generation and intermediate merges, by computing partial
aggregate values
4 For count, min, max, sum: keep aggregate values on tuples
found so far in the group. – When combining partial aggregate for count, add up the
aggregates
4 For avg, keep sum and count, and divide sum by count at
the end
©Silberschatz, Korth and Sudarshan 12.46 Database System Concepts - 7th Edition
n Set operations (,  and ): can either use variant of merge-join
after sorting, or variant of hash-join. n E.g., Set operations using hashing:
1. Partition both relations using the same hash function
2. Process each partition i as follows. 1. Using a different hashing function, build an in-memory hash
index on ri. 2. Process si as follows
l r  s:
1. Add tuples in si to the hash index if they are not
already in it. 2. At end of si add the tuples in the hash index to the
result.
©Silberschatz, Korth and Sudarshan 12.47 Database System Concepts - 7th Edition
n E.g., Set operations using hashing:
1. as before partition r and s,
2. as before, process each partition i as follows
1. build a hash index on ri
2. Process si as follows
l r  s:
1. output tuples in si to the result if they are already
there in the hash index
l r – s:
1. for each tuple in si, if it is there in the hash index,
delete it from the index. 2. At end of si add remaining tuples in the hash
index to the result.
©Silberschatz, Korth and Sudarshan 12.48 Database System Concepts - 7th Edition
n Outer join can be computed either as
l A join followed by addition of null-padded non-participating
tuples. l by modifying the join algorithms. n Modifying merge join to compute r s
l In r s, non participating tuples are those in r – R(r s)
l Modify merge-join to compute r s:
4 During merging, for every tuple tr from r that do not match
any tuple in s, output tr padded with nulls. l Right outer-join and full outer-join can be computed similarly.
©Silberschatz, Korth and Sudarshan 12.49 Database System Concepts - 7th Edition
n Modifying hash join to compute r s
l If r is probe relation, output non-matching r tuples padded
with nulls
l If r is build relation, when probing keep track of which
r tuples matched s tuples. At end of si output
non-matched r tuples padded with nulls
©Silberschatz, Korth and Sudarshan 12.50 Database System Concepts - 7th Edition
n So far: we have seen algorithms for individual operations
n Alternatives for evaluating an entire expression tree
l Materialization: generate results of an expression whose inputs are relations or
are already computed, materialize (store) it on disk. Repeat. l Pipelining: pass on tuples to parent operations even as an operation is being
executed
n We study above alternatives in more detail
©Silberschatz, Korth and Sudarshan 12.51 Database System Concepts - 7th Edition
n Materialized evaluation: evaluate one operation at a time,
starting at the lowest-level. Use intermediate results materialized
into temporary relations to evaluate next-level operations. n E.g., in figure below, compute and store
then compute and store its join with instructor, and finally compute
the projection on name. ( ) "Watson " department  building 
©Silberschatz, Korth and Sudarshan 12.52 Database System Concepts - 7th Edition
n Materialized evaluation is always applicable
n Cost of writing results to disk and reading them back can be quite high
l Our cost formulas for operations ignore cost of writing results to disk, so
4 Overall cost = Sum of costs of individual operations +
cost of writing intermediate results to disk
n Double buffering: use two output buffers for each operation, when one is full write it
to disk while the other is getting filled
l Allows overlap of disk writes with computation and reduces execution time
©Silberschatz, Korth and Sudarshan 12.53 Database System Concepts - 7th Edition
n Pipelined evaluation : evaluate several operations
simultaneously, passing the results of one operation on to the next. n E.g., in previous expression tree, don
’t store result of
l instead, pass tuples directly to the join.. Similarly, don
’t store
result of join, pass tuples directly to projection. n Much cheaper than materialization: no need to store a temporary
relation to disk. n Pipelining may not always be possible – e.g., sort, hash-join. n For pipelining to be effective, use evaluation algorithms that
generate output tuples even as tuples are received for inputs to the
operation. n Pipelines can be executed in two ways: demand driven and
producer driven
( ) "Watson " department  building 
©Silberschatz, Korth and Sudarshan 12.54 Database System Concepts - 7th Edition
n In demand driven or lazy evaluation
l system repeatedly requests next tuple from top level operation
l Each operation requests next tuple from children operations as
required, in order to output its next tuple
l In between calls, operation has to maintain
“
state
”
so it knows what to
return next
n In producer-driven or eager pipelining
l Operators produce tuples eagerly and pass them up to their parents
4 Buffer maintained between operators, child puts tuples in buffer, parent removes tuples from buffer
4 if buffer is full, child waits till there is space in the buffer, and then
generates more tuples
l System schedules operations that have space in output buffer and can
process more input tuples
n Alternative name: pull and push models of pipelining
©Silberschatz, Korth and Sudarshan 12.55 Database System Concepts - 7th Edition
n Implementation of demand-driven pipelining
l Each operation is implemented as an iterator implementing the
following operations
4 open() – E.g. file scan: initialize file scan
» state: pointer to beginning of file
– E.g.merge join: sort relations;
» state: pointers to beginning of sorted relations
4 next() – E.g. for file scan: Output next tuple, and advance and store
file pointer – E.g. for merge join: continue with merge from earlier state
till
next output tuple is found. Save pointers as iterator state. 4 close()
©Silberschatz, Korth and Sudarshan 12.56 Database System Concepts - 7th Edition
n Blocking operations: cannot generate any output until all input is
consumed
l E.g., sorting, aggregation, …
n But can often consume inputs from a pipeline, or produce outputs to
a pipeline
n Key idea: blocking operations often have two suboperations
l E.g., for sort: run generation and merge
l For hash join: partitioning and build-probe
n Treat them as separate operations
©Silberschatz, Korth and Sudarshan 12.57 Database System Concepts - 7th Edition
n Pipeline stages:
l All operations in a stage run concurrently
l A stage can start only after preceding stages have completed
execution
©Silberschatz, Korth and Sudarshan 12.58 Database System Concepts - 7th Edition
n Some algorithms are not able to output results even as they get
input tuples
l E.g., merge join, or hash join
l intermediate results written to disk and then read back
n Algorithm variants to generate (at least some) results on the fly, as
input tuples are read in
l E.g., hybrid hash join generates output tuples even as probe
relation tuples in the in-memory partition (partition 0) are read in
l Double-pipelined join technique: Hybrid hash join, modified
to buffer partition 0 tuples of both relations in-memory, reading
them as they become available, and output results of any
matches between partition 0 tuples
4 When a new r0
tuple is found, match it with existing s0
tuples, output matches, and save it in r0
4 Symmetrically for s0
tuples
©Silberschatz, Korth and Sudarshan 12.59 Database System Concepts - 7th Edition
n Data streams
l Data entering database in a continuous manner
l E.g., Sensor networks, user clicks, …
n Continuous queries
l Results get updated as streaming data enters the database
l Aggregation on windows is often used
4 E.g., tumbling windows divide time into units, e.g., hours, minutes
n Need to use pipelined processing algorithms
l Punctuations used to infer when all data for a window has been
received
©Silberschatz, Korth and Sudarshan 12.60 Database System Concepts - 7th Edition
n Query compilation to machine code
l Overheads of interpretation
4 E.g., repeatedly finding attribute location within tuple, from
metadata
4 Overhead of expression evaluation
l Compilation can avoid many such overheads and speed up
query processing
l Often via generation of Java byte code / LLVM, with just-in-time
(JIT) compilation
n Column-oriented storage
l Allows vector operations (in conjunction with compilation)
n Cache conscious algorithms
©Silberschatz, Korth and Sudarshan 12.61 Database System Concepts - 7th Edition
n Goal: minimize cache misses, make best use of data fetched into
the cache as part of a cache line
n For sorting:
l Use runs that are as large as L3 cache (a few megabytes) to
avoid cache misses during sorting of a run
l Then merge runs as usual in merge-sort
n For hash-join
l First create partitions such that build+probe partitions fit in
memory
l Then subpartition further s.t. build subpartition+index fits in L3
cache
4 Speeds up probe phase significantly by avoiding cache
misses
n Lay out attributes of tuples to maximize cache usage
l Attributes that are often accessed together should be stored
adjacent to each other
n Use multiple threads for parallel query processing
l Cache misses leads to stall of one thread, but others can
proceed
Database System Concepts, 7th Ed. ©Silberschatz, Korth and Sudarshan
See www.db-book.com for conditions on re-use
15.2、15.3
